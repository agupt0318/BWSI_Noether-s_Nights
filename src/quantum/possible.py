from matplotlib import pyplot as plt
from qiskit import QuantumCircuit, QuantumRegister
from qiskit.circuit.library import C4XGate, C3XGate


class QuantumS_DES(QuantumCircuit):
    def __init__(self):
        key_register = self.key_register = QuantumRegister(10, name='key_register')
        data_register = self.data_register = QuantumRegister(8, name='data_register')

        super().__init__(key_register, data_register)

        self.cx(key_register[0], data_register[6])
        self.cx(key_register[6], data_register[3])
        self.cx(key_register[8], data_register[7])
        self.cx(key_register[3], data_register[4])
        self.cx(data_register[4], data_register[0])
        self.append(C4XGate(), [data_register[3], data_register[4], data_register[6], data_register[7], data_register[0]])
        self.ccx(data_register[6], data_register[7], data_register[0])
        self.x(data_register[6])
        self.x(data_register[7])
        self.ccx(data_register[3], data_register[6], data_register[0])
        self.ccx(data_register[6], data_register[7], data_register[1])
        self.x(data_register[6])
        self.append(C4XGate(), [data_register[3], data_register[4], data_register[6], data_register[7], data_register[1]])
        self.x(data_register[3])
        self.x(data_register[4])
        self.x(data_register[7])
        self.ccx(data_register[3], data_register[6], data_register[1])
        self.ccx(data_register[4], data_register[6], data_register[1])
        self.x(data_register[4])
        self.x(data_register[3])
        self.cx(key_register[0], data_register[6])
        self.cx(key_register[6], data_register[3])
        self.cx(key_register[3], data_register[4])
        self.cx(key_register[8], data_register[7])
        self.cx(key_register[2], data_register[4])
        self.cx(key_register[5], data_register[3])
        self.cx(key_register[9], data_register[6])
        self.cx(key_register[7], data_register[7])
        self.cx(data_register[4], data_register[2])
        self.append(C3XGate(), [data_register[3], data_register[6], data_register[7], data_register[5]])
        self.x(data_register[3])
        self.x(data_register[4])
        self.ccx(data_register[3], data_register[7], data_register[5])
        self.ccx(data_register[3], data_register[7], data_register[2])
        self.append(C4XGate(), [data_register[3], data_register[4], data_register[6], data_register[7], data_register[2]])
        self.ccx(data_register[3], data_register[6], data_register[5])
        self.x(data_register[7])
        self.x(data_register[3])
        self.x(data_register[6])
        self.x(data_register[4])
        self.ccx(data_register[3], data_register[6], data_register[2])
        self.append(C3XGate(), [data_register[3], data_register[4], data_register[7], data_register[5]])
        self.x(data_register[7])
        self.x(data_register[6])
        self.cx(key_register[2], data_register[4])
        self.cx(key_register[5], data_register[3])
        self.cx(key_register[9], data_register[6])
        self.cx(key_register[7], data_register[7])
        
        self.cx(key_register[5], data_register[5])
        self.cx(key_register[7], data_register[0])
        self.cx(key_register[1], data_register[1])
        self.cx(key_register[6], data_register[2])
        
        self.cx(data_register[2], data_register[6])
        self.append(C4XGate(), [data_register[5], data_register[2], data_register[0], data_register[1], data_register[6]])
        self.ccx(data_register[0], data_register[1], data_register[6])
        self.x(data_register[0])
        self.ccx(data_register[0], data_register[1], data_register[6])
        
        self.x(data_register[5])
        self.ccx(data_register[0], data_register[5], data_register[3])
        self.x(data_register[0])
        self.append(C4XGate(), [data_register[5], data_register[2], data_register[0], data_register[1], data_register[3]])
        self.x(data_register[1])
        self.x(data_register[2])
        self.x(data_register[5])
        self.ccx(data_register[0], data_register[1], data_register[3])
        self.ccx(data_register[0], data_register[2], data_register[3])
        self.x(data_register[2])
        self.x(data_register[1])
        
        self.cx(key_register[4], data_register[2])
        self.cx(key_register[7], data_register[0])
        self.cx(key_register[2], data_register[1])
        self.cx(key_register[4], data_register[2])
        self.cx(key_register[9], data_register[5])
        self.cx(key_register[1], data_register[2])
        self.cx(key_register[0], data_register[1])
        
        self.append(C3XGate(), [data_register[1], data_register[0], data_register[5], data_register[7]])
        self.x(data_register[1])
        self.cx(data_register[2], data_register[4])
        self.x(data_register[2])
        self.ccx(data_register[1], data_register[5], data_register[7])
        self.ccx(data_register[1], data_register[5], data_register[4])
        self.append(C4XGate(), [data_register[5], data_register[0], data_register[1], data_register[2], data_register[4]])
        self.ccx(data_register[0], data_register[1], data_register[7])
        self.x(data_register[0])
        self.x(data_register[1])
        self.x(data_register[5])
        self.x(data_register[2])
        self.ccx(data_register[0], data_register[1], data_register[4])
        self.cx(key_register[9], data_register[5])
        self.append(C3XGate(), [data_register[5], data_register[1], data_register[2], data_register[7]])
        self.x(data_register[0])
        self.x(data_register[5])
        
        self.cx(key_register[1], data_register[2])
        self.cx(key_register[0], data_register[1])
        self.cx(key_register[8], data_register[0])
        
        self.swap(data_register[0], data_register[6])
        self.swap(data_register[1], data_register[3])
        self.swap(data_register[2], data_register[4])
        
        self.swap(data_register[5], data_register[7])

if __name__ == '__main__':
    self = QuantumS_DES()
    self.draw('mpl')
    plt.show()
