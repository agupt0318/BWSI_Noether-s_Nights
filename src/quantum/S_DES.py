from matplotlib import pyplot as plt
from qiskit import QuantumCircuit, QuantumRegister
from qiskit.circuit.library import C4XGate, C3XGate


class QuantumS_DES(QuantumCircuit):
    def __init__(self):
        key = self.key_register = QuantumRegister(10, name='key')
        data = self.data_register = QuantumRegister(8, name='data')

        super().__init__(key, data)

        self.cx(key[0], data[6])
        self.cx(key[6], data[3])
        self.cx(key[8], data[7])
        self.cx(key[3], data[4])
        self.cx(data[4], data[0])
        self.append(C4XGate(), [data[3], data[4], data[6], data[7], data[0]])
        self.ccx(data[6], data[7], data[0])
        self.x(data[6])
        self.x(data[7])
        self.ccx(data[3], data[6], data[0])
        self.ccx(data[6], data[7], data[1])
        self.x(data[6])
        self.append(C4XGate(), [data[3], data[4], data[6], data[7], data[1]])
        self.x(data[3])
        self.x(data[4])
        self.x(data[7])
        self.ccx(data[3], data[6], data[1])
        self.ccx(data[4], data[6], data[1])
        self.x(data[4])
        self.x(data[3])
        self.cx(key[0], data[6])
        self.cx(key[6], data[3])
        self.cx(key[3], data[4])
        self.cx(key[8], data[7])
        self.cx(key[2], data[4])
        self.cx(key[5], data[3])
        self.cx(key[9], data[6])
        self.cx(key[7], data[7])
        self.cx(data[4], data[2])
        self.append(C3XGate(), [data[3], data[6], data[7], data[5]])
        self.x(data[3])
        self.x(data[4])
        self.ccx(data[3], data[7], data[5])
        self.ccx(data[3], data[7], data[2])
        self.append(C4XGate(), [data[3], data[4], data[6], data[7], data[2]])
        self.ccx(data[3], data[6], data[5])
        self.x(data[7])
        self.x(data[3])
        self.x(data[6])
        self.x(data[4])
        self.ccx(data[3], data[6], data[2])
        self.append(C3XGate(), [data[3], data[4], data[7], data[5]])
        self.x(data[7])
        self.x(data[6])
        self.cx(key[2], data[4])
        self.cx(key[5], data[3])
        self.cx(key[9], data[6])
        self.cx(key[7], data[7])

        self.cx(key[5], data[5])
        self.cx(key[7], data[0])
        self.cx(key[1], data[1])
        self.cx(key[6], data[2])

        self.cx(data[2], data[6])
        self.append(C4XGate(), [data[5], data[2], data[0], data[1], data[6]])
        self.ccx(data[0], data[1], data[6])
        self.x(data[0])
        self.ccx(data[0], data[1], data[6])

        self.x(data[5])
        self.ccx(data[0], data[5], data[3])
        self.x(data[0])
        self.append(C4XGate(), [data[5], data[2], data[0], data[1], data[3]])
        self.x(data[1])
        self.x(data[2])
        self.x(data[5])
        self.ccx(data[0], data[1], data[3])
        self.ccx(data[0], data[2], data[3])
        self.x(data[2])
        self.x(data[1])

        self.cx(key[4], data[2])
        self.cx(key[7], data[0])
        self.cx(key[2], data[1])
        self.cx(key[4], data[2])
        self.cx(key[9], data[5])
        self.cx(key[1], data[2])
        self.cx(key[0], data[1])

        self.append(C3XGate(), [data[1], data[0], data[5], data[7]])
        self.x(data[1])
        self.cx(data[2], data[4])
        self.x(data[2])
        self.ccx(data[1], data[5], data[7])
        self.ccx(data[1], data[5], data[4])
        self.append(C4XGate(), [data[5], data[0], data[1], data[2], data[4]])
        self.ccx(data[0], data[1], data[7])
        self.x(data[0])
        self.x(data[1])
        self.x(data[5])
        self.x(data[2])
        self.ccx(data[0], data[1], data[4])
        self.cx(key[9], data[5])
        self.append(C3XGate(), [data[5], data[1], data[2], data[7]])
        self.x(data[0])
        self.x(data[5])

        self.cx(key[1], data[2])
        self.cx(key[0], data[1])
        self.cx(key[8], data[0])

        self.swap(data[0], data[6])
        self.swap(data[1], data[3])
        self.swap(data[2], data[4])

        self.swap(data[5], data[7])


if __name__ == '__main__':
    self = QuantumS_DES()
    self.draw('mpl')
    plt.show()
